#include <iostream>
#include <stdexcept>

// Node Class
template <typename T>
class Node {
public:
    T data;
    Node* next;

    Node(T value) : data(value), next(nullptr) {}
};

// ListIterator Class
template <typename T>
class ListIterator {
private:
    Node<T>* current;

public:
    explicit ListIterator(Node<T>* start) : current(start) {}

    bool HasNext() {
        return current != nullptr;
    }

    T& Next() {
        if (!HasNext()) {
            throw std::out_of_range("No more elements in the list.");
        }
        T& value = current->data;
        current = current->next;
        return value;
    }
};

// LinkedList Class
template <typename T>
class LinkedList {
private:
    Node<T>* head;
    Node<T>* tail;
    int size;

    Node<T>* GetNode(int index) {
        if (index < 0 || index >= size) {
            throw std::out_of_range("Index out of range.");
        }
        Node<T>* current = head;
        for (int i = 0; i < index; ++i) {
            current = current->next;
        }
        return current;
    }

public:
    LinkedList() : head(nullptr), tail(nullptr), size(0) {}

    ~LinkedList() {
        while (head != nullptr) {
            Node<T>* temp = head;
            head = head->next;
            delete temp;
        }
    }

    void Add(T& value) {
        Node<T>* newNode = new Node<T>(value);
        if (tail != nullptr) {
            tail->next = newNode;
        }
        else {
            head = newNode;
        }
        tail = newNode;
        ++size;
    }

    void Insert(T& value, int index) {
        if (index < 0 || index > size) {
            throw std::out_of_range("Index out of range.");
        }

        Node<T>* newNode = new Node<T>(value);

        if (index == 0) {
            newNode->next = head;
            head = newNode;
            if (size == 0) {
                tail = newNode;
            }
        }
        else {
            Node<T>* prev = GetNode(index - 1);
            newNode->next = prev->next;
            prev->next = newNode;
            if (index == size) {
                tail = newNode;
            }
        }
        ++size;
    }

    T& Get(int index) {
        return GetNode(index)->data;
    }

    int IndexOf(T& value) {
        Node<T>* current = head;
        int index = 0;
        while (current != nullptr) {
            if (current->data == value) {
                return index;
            }
            current = current->next;
            ++index;
        }
        return -1;
    }

    T Remove(int index) {
        if (index < 0 || index >= size) {
            throw std::out_of_range("Index out of range.");
        }

        Node<T>* removedNode = nullptr;
        T removedData; // Temporary variable to hold the removed data

        if (index == 0) {
            removedNode = head;
            head = head->next;
            if (head == nullptr) {
                tail = nullptr;
            }
        }
        else {
            Node<T>* prev = GetNode(index - 1);
            removedNode = prev->next;
            prev->next = removedNode->next;
            if (removedNode == tail) {
                tail = prev;
            }
        }

        removedData = removedNode->data; // Copy the data
        delete removedNode; // Safely delete the node
        --size;

        return removedData; // Return the copied value
    }


    ListIterator<T> Iterator() {
        return ListIterator<T>(head);
    }

    int Size() {
        return size;
    }
};
